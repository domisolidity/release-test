{"version":3,"sources":["components/NftCard.jsx","logo.svg","pages/NftDetail.jsx","images/123.jpg","serviceWorker.js","redux/blockchain/blockchainReducer.js","redux/data/dataReducer.js","redux/store.js","components/layout/topnav/TopNav.jsx","redux/blockchain/blockchainActions.js","pages/Main.jsx","pages/BlockGame.jsx","pages/Rank.jsx","pages/Market.jsx","components/NftDetailButton.jsx","pages/Nft.jsx","components/networkCard/NetworkCard.jsx","components/inventoryCard/InventoryCard.jsx","pages/Mypage.jsx","App.js","components/layout/Layout.jsx","index.js"],"names":["NftCard","grade","price","window","location","pathname","w","h","alignItems","textAlign","backgroundColor","module","exports","ipfsClient","create","NftDetail","blockchain","useSelector","state","account","nftContract","ipfsBaseUrl","mintingProcess","e","a","preventDefault","createMetaDataAndMint","getImageData","img","Buffer","from","nftImg","console","log","_name","_des","_imgBuffer","add","addedImage","metaDataObj","name","description","image","path","JSON","stringify","addedMetaData","mint","_uri","methods","send","once","err","then","receipt","templateColumns","gap","colSpan","bg","onClick","Boolean","hostname","match","initialState","loading","web3","errorMsg","blockchainReducer","action","type","payload","allLips","mintingTier","allOwnerLips","error","dataReducer","rootReducer","combineReducers","data","middleware","thunk","composeEnhancers","compose","applyMiddleware","store","createStore","TopItem","props","active","className","title","TopNav","useLocation","activeItem","topbar_items","findIndex","item","route","src","logo","alt","map","index","to","key","display_name","connectFailed","connect","dispatch","ethereum","Web3","request","method","accounts","networkId","NftContract","networks","NetworkData","eth","Contract","abi","address","on","updateAccount","reload","Main","BlockGame","useState","score","setScore","gameEnded","setGameEnded","getGameState","document","querySelector","sendScore","axios","post","parseInt","res","catch","useEffect","scriptSrc","scripts","i","length","createElement","async","body","appendChild","forEach","script","removeChild","id","color","colorScheme","innerHTML","disabled","Rank","storageValue","setStorageValue","simpleStorage","callback","alert","set","gas","gasPrice","result","get","call","response","Market","NftDetailButton","Nft","as","size","justifyContent","nft","NetworkCard","borderWidth","borderRadius","mr","p","display","fontWeight","fontSize","mt","icon","ml","flexDirection","unit","tokenName","tokenUnit","InventoryCard","Mypage","m","mb","justifyItems","App","element","Layout","useDispatch","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c89dd2f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Box, Button, Text, Image } from \"@chakra-ui/react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NftCard = ({ grade, price }) => {\r\n\r\n    const currentLocation = window.location.pathname;\r\n  return (\r\n    <Box\r\n      w={280}\r\n      h={400}\r\n      alignItems=\"center\"\r\n      textAlign=\"center\"\r\n      backgroundColor={\"blue.300\"}\r\n    >\r\n      {/* Image */}\r\n      <Text textAlign=\"center\">nftcard</Text>\r\n      <Box>\r\n        <Text textAlign=\"center\">grade : {grade}</Text>\r\n        <Text textAlign=\"center\">price : {price}</Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default NftCard;","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\r\nimport { Box, Grid, GridItem, Button } from \"@chakra-ui/react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport NftCard from \"../components/NftCard\";\r\nimport nftImg from \"../images/123.jpg\";\r\nimport { create } from \"ipfs-http-client\";\r\nimport imageToBase64 from \"image-to-base64\";\r\n\r\nconst ipfsClient = create(\"https://ipfs.infura.io:5001/api/v0\");\r\n\r\nconst NftDetail = () => {\r\n  const blockchain = useSelector((state) => state.blockchain);\r\n  const { account,  nftContract } = blockchain;\r\n\r\n  \r\n  const name = \"doremifaSolidity-purple\";\r\n  const description = \"IPFS minted nft woooooo.\";\r\n  const ipfsBaseUrl = \"https://ipfs.infura.io/ipfs/\";\r\n  \r\n  const mintingProcess = async(e) =>{\r\n    e.preventDefault();\r\n    await createMetaDataAndMint(name, description, getImageData())  \r\n  }\r\n  \r\n  const getImageData = () => {\r\n    const img = new Buffer.from(nftImg)\r\n    console.log(img)\r\n    return img\r\n  };\r\n\r\n  const createMetaDataAndMint = async (_name, _des, _imgBuffer) => {\r\n    // setLoading(true);\r\n    // setStatus(\"Uploading to IPFS\");\r\n    try {\r\n      const addedImage = await ipfsClient.add(_imgBuffer);\r\n      const metaDataObj = {\r\n        name: _name,\r\n        description: _des,\r\n        image: ipfsBaseUrl + addedImage.path,\r\n      };\r\n      const addedMetaData = await ipfsClient.add(JSON.stringify(metaDataObj));\r\n      console.log(ipfsBaseUrl + addedMetaData.path);\r\n      mint(ipfsBaseUrl + addedMetaData.path);\r\n    } catch (err) {\r\n      console.log(err);\r\n      // setLoading(false);\r\n      // setStatus(\"Error\");\r\n    }\r\n  };\r\n\r\n  const mint = (_uri) => {\r\n    console.log(nftContract)\r\n    nftContract.methods.mint(account, _uri).send({ from: account }).once(\"error\", (err) => {\r\n        console.log(err);\r\n        // setLoading(false);\r\n        // setStatus(\"Error\");\r\n      })\r\n      .then((receipt) => {\r\n        console.log(receipt);\r\n        // setLoading(false);\r\n        // dispatch(fetchData(account));\r\n        // setStatus(\"Successfully minting your NFT\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Grid templateColumns=\"repeat(6, 1fr)\" gap={5}>\r\n      <GridItem colSpan={2} bg=\"tomato\" h=\"500px\">\r\n        <NftCard />\r\n        <Button onClick={mintingProcess}>\r\n          민팅\r\n        </Button>\r\n      </GridItem>\r\n      <GridItem colSpan={4} bg=\"tomato\" h={\"100%\"}>\r\n        <Box h={1200}></Box>\r\n        <Box h={1200}>b</Box>\r\n      </GridItem>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default NftDetail;\r\n","module.exports = __webpack_public_path__ + \"static/media/123.d4db80c0.jpg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\"No internet connection found. App is running in offline mode.\");\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const initialState = {\r\n  loading: false,\r\n  account: null,\r\n  nftContract: null,\r\n  web3: null,\r\n  errorMsg: \"\",\r\n};\r\n\r\nconst blockchainReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CONNECTION_REQUEST\":\r\n      return {\r\n        ...initialState,\r\n        loading: true,\r\n      };\r\n    case \"CONNECTION_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        account: action.payload.account,\r\n        nftContract: action.payload.nftContract,\r\n        web3: action.payload.web3,\r\n      };\r\n    case \"CONNECTION_FAILED\":\r\n      return {\r\n        ...initialState,\r\n        loading: false,\r\n        errorMsg: action.payload,\r\n      };\r\n    case \"UPDATE_ACCOUNT\":\r\n      return {\r\n        ...state,\r\n        account: action.payload.account,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default blockchainReducer;\r\n","const initialState = {\r\n  loading: false,\r\n  allLips: [],\r\n  mintingTier: [\r\n    { grade: \"purple\", price: 1 },\r\n    {\r\n      grade: \"green\",\r\n      price: 0.7,\r\n    },\r\n    {\r\n      grade: \"red\",\r\n      price: 0.5,\r\n    },\r\n  ],\r\n  allOwnerLips: [],\r\n  error: false,\r\n  errorMsg: \"\",\r\n};\r\n\r\nconst dataReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CHECK_DATA_REQUEST\":\r\n      return {\r\n        ...initialState,\r\n        loading: true,\r\n      };\r\n    case \"CHECK_DATA_SUCCESS\":\r\n      return {\r\n        ...initialState,\r\n        loading: false,\r\n        allLips: action.payload.allLips,\r\n        allOwnerLips: action.payload.allOwnerLips,\r\n      };\r\n    case \"CHECK_DATA_FAILED\":\r\n      return {\r\n        ...initialState,\r\n        loading: false,\r\n        error: true,\r\n        errorMsg: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default dataReducer;\r\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\r\nimport dataReducer from \"./data/dataReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  blockchain: blockchainReducer,\r\n  data: dataReducer,\r\n});\r\n\r\nconst middleware = [thunk];\r\nconst composeEnhancers = compose(applyMiddleware(...middleware));\r\n\r\nconst configureStore = () => {\r\n  return createStore(rootReducer, composeEnhancers);\r\n};\r\n\r\nconst store = configureStore();\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport \"./topnav.css\";\r\nimport { useLocation, Link } from \"react-router-dom\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n\r\nimport topbar_items from \"../../../assets/JsonData/topbar_router.json\";\r\nimport logo from \"../../../logo.svg\";\r\n\r\nconst TopNav = () => {\r\n  const location = useLocation();\r\n\r\n  const activeItem = topbar_items.findIndex(\r\n    (item) => item.route === location.pathname\r\n  );\r\n\r\n  return (\r\n    <div className=\"topnav\">\r\n      <div className=\"topnav__logo\">\r\n        <img src={logo} alt=\"company logo\" />\r\n      </div>\r\n      <Box className=\"topnav__right\">\r\n        {topbar_items.map((item, index) => (\r\n          <Link to={item.route} key={index}>\r\n            <TopItem title={item.display_name} active={index === activeItem} />\r\n          </Link>\r\n        ))}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TopItem = (props) => {\r\n  const active = props.active ? \"active\" : \"\";\r\n\r\n  return (\r\n    <div className=\"topnav__item\">\r\n      <div className={`topnav__item-inner ${active}`}>\r\n        <span>{props.title}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopNav;\r\n","// constants\r\nimport Web3 from \"web3\";\r\nimport NftContract from \"../../contracts/NftContract.json\";\r\n\r\n// log\r\nimport { fetchData } from \"../data/dataActions\";\r\n\r\nconst connectRequest = () => {\r\n  return {\r\n    type: \"CONNECTION_REQUEST\",\r\n  };\r\n};\r\n\r\nconst connectSuccess = (payload) => {\r\n  return {\r\n    type: \"CONNECTION_SUCCESS\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst connectFailed = (payload) => {\r\n  return {\r\n    type: \"CONNECTION_FAILED\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst updateAccountRequest = (payload) => {\r\n  return {\r\n    type: \"UPDATE_ACCOUNT\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const connect = () => {\r\n  return async (dispatch) => {\r\n    dispatch(connectRequest());\r\n    if (window.ethereum) {\r\n      let web3 = new Web3(window.ethereum);\r\n      try {\r\n        const accounts = await window.ethereum.request({\r\n          method: \"eth_accounts\",\r\n        });\r\n        console.log(accounts);\r\n        const networkId = await window.ethereum.request({\r\n          method: \"net_version\",\r\n        });\r\n        console.log(\"networkId : \", networkId);\r\n\r\n        if (networkId == 1337) {\r\n          const NetworkData = await NftContract.networks[networkId];\r\n          const nftContract = new web3.eth.Contract(NftContract.abi, NetworkData.address);\r\n\r\n          if (accounts[0] == null) {\r\n            dispatch(connectFailed(\"메타마스크 로그인이 필요합니다.\"));\r\n            return;\r\n          }\r\n\r\n          dispatch(\r\n            connectSuccess({\r\n              account: accounts[0],\r\n              nftContract: nftContract,\r\n              web3: web3,\r\n            })\r\n          );\r\n\r\n          // Add listeners start\r\n          window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n            dispatch(updateAccount(accounts[0]));\r\n          });\r\n          window.ethereum.on(\"chainChanged\", () => {\r\n            window.location.reload();\r\n          });\r\n          // Add listeners end\r\n        } else {\r\n          dispatch(\r\n            connectFailed(`현재 networkId 는 ${networkId} 입니다.\\nnetworkId : 1337 (로컬호스트)로 변경이 필요합니다.`)\r\n          );\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n        dispatch(connectFailed(\"Something went wrong.\"));\r\n      }\r\n    } else {\r\n      dispatch(connectFailed(\"Install Metamask.\"));\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateAccount = (account) => {\r\n  return async (dispatch) => {\r\n    dispatch(updateAccountRequest({ account: account }));\r\n    // dispatch(fetchData(account));\r\n  };\r\n};\r\n","import React from \"react\";\r\n\r\nconst Main = () => {\r\n  return <div>Main페이지</div>;\r\n};\r\n\r\nexport default Main;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Box, Button } from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport \"./BlockGame.css\";\r\n\r\nconst BlockGame = () => {\r\n  const blockchain = useSelector((state) => state.blockchain);\r\n  const { account } = blockchain;\r\n\r\n  const [score, setScore] = useState(\"\");\r\n  const [gameEnded, setGameEnded] = useState(true);\r\n\r\n  const getGameState = () => {\r\n    if (\r\n      document.querySelector(\"#blockGameContainer.playing\") ||\r\n      document.querySelector(\"#blockGameContainer.resetting\")\r\n    ) {\r\n      setGameEnded(false);\r\n    } else {\r\n      setGameEnded(true);\r\n    }\r\n  };\r\n\r\n  const getGameScore = () => {\r\n    setScore(document.querySelector(\"#score\").innerHTML);\r\n    if (!document.querySelector(\"#blockGameContainer.playing\"))\r\n      setGameEnded(true);\r\n  };\r\n\r\n  const sendScore = async () => {\r\n    await axios\r\n      .post(`http://localhost:5000/game/send-score`, { score: parseInt(score) })\r\n      .then((res) => {\r\n        console.log(res);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  // 랜더 될 때 게임 관련 스크립트를 html에 넣어준다\r\n  useEffect(() => {\r\n    // <script>에 들어갈 js들의 src\r\n    const scriptSrc = [\r\n      \"https://cdnjs.cloudflare.com/ajax/libs/three.js/r83/three.min.js\",\r\n      \"https://cdnjs.cloudflare.com/ajax/libs/gsap/latest/TweenMax.min.js\",\r\n      \"./blockGameScript.js\",\r\n    ];\r\n    const scripts = [, ,];\r\n    for (let i = 0; i < scriptSrc.length; i++) {\r\n      // <script> 태그를 만들어 배열에 넣고\r\n      scripts[i] = document.createElement(\"script\");\r\n      // 그 태그의 src 정보를 넣어\r\n      scripts[i].src = scriptSrc[i];\r\n      scripts[i].async = true;\r\n      // 문서 body에 추가해준다\r\n      document.body.appendChild(scripts[i]);\r\n    }\r\n\r\n    return () => {\r\n      scripts.forEach((script) => {\r\n        // 스크립트 태그 지워주는 녀석\r\n        document.body.removeChild(script);\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"blockGameContainer\">\r\n      <div id=\"game\"></div>\r\n      <div id=\"score\">0</div>\r\n      <Box color={\"#333344\"} id=\"instructions\">\r\n        블록을 높이 쌓으세요\r\n      </Box>\r\n      <div className=\"game-over\">\r\n        <Button id=\"restart-button\" onClick={getGameState}>\r\n          다시시작\r\n        </Button>\r\n        <h2>게임 종료</h2>\r\n        <p>대~단합니다</p>\r\n      </div>\r\n      <div className=\"game-ready\">\r\n        <Button id=\"start-button\" onClick={getGameState}>\r\n          시작\r\n        </Button>\r\n        <div></div>\r\n      </div>\r\n      <Button\r\n        colorScheme={\"blue\"}\r\n        w={100}\r\n        onClick={getGameScore}\r\n        disabled={gameEnded}\r\n        className=\"placeBlock-button\"\r\n      >\r\n        멈춰!\r\n      </Button>\r\n      <Button\r\n        colorScheme={\"orange\"}\r\n        onClick={sendScore}\r\n        className=\"score-registration-button\"\r\n      >\r\n        점수 등록\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BlockGame;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Rank = () => {\r\n  const [storageValue, setStorageValue] = useState(0);\r\n  const blockchain = useSelector((state) => state.blockchain);\r\n  const { account, simpleStorage } = blockchain;\r\n\r\n  //callback 방법\r\n  const callback = async () => {\r\n    try {\r\n      if (!account) {\r\n        alert(\"로그인이 필요합니다.\");\r\n      }\r\n      await simpleStorage.methods\r\n        .set(10)\r\n        .send({ from: account, gas: 50000, gasPrice: \"40000000000\" })\r\n        .then((result) => console.log(result));\r\n      const response = await simpleStorage.methods.get().call();\r\n      setStorageValue(response);\r\n    } catch (error) {\r\n      console.log(error);\r\n      console.log(\"에러\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {console.log(\"Rank.jsx 렌더\")}\r\n      <h1>PATH: {window.location.pathname}</h1>\r\n      <p>address : {account}</p>\r\n\r\n      <button onClick={callback}>10으로 바꾸기(callback)</button>\r\n      <br />\r\n\r\n      <div>The stored value is: {storageValue}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Rank;\r\n","import React from \"react\";\r\n\r\nconst Market = () => {\r\n  return (\r\n    <div>\r\n      {console.log(\"Market.jsx 렌더\")}\r\n      MarketPage\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Market;\r\n","import React from 'react'\r\nimport { Box, Button } from \"@chakra-ui/react\";\r\nimport { Link } from \"react-router-dom\";\r\nconst NftDetailButton = ({ grade}) => {\r\n\r\n  return (\r\n    <Box>\r\n       <Link to={`./${grade}`}>\r\n                <Button>상세 정보 보기</Button>\r\n        </Link>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default NftDetailButton","import React from \"react\";\r\nimport { Box, Heading, Flex} from \"@chakra-ui/react\";\r\nimport NftCard from \"../components/NftCard\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport NftDetailButton from \"../components/NftDetailButton\";\r\nconst Nft = () => {\r\n  const data = useSelector((state) => state.data);\r\n  const { mintingTier } = data;\r\n\r\n  return (\r\n    <>\r\n      <Box w={\"100%\"} h={300} bg={\"yellow\"}>\r\n        {console.log(\"Nft.jsx 렌더\")}\r\n        NFT 페이지\r\n      </Box>\r\n      <Box w={\"100%\"}>\r\n        <Heading as='h2' size='2xl' textAlign={\"center\"}>NFT</Heading>\r\n      </Box>\r\n      <Flex justifyContent={\"space-around\"}>\r\n        {mintingTier && mintingTier.map((nft, index) => {\r\n          return (\r\n            <Box key={index}>\r\n                <NftCard grade={nft.grade} price={nft.price} />\r\n                <NftDetailButton grade={nft.grade}/>\r\n            </Box>\r\n          );\r\n        })}\r\n      </Flex>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Nft;\r\n","import React from \"react\";\r\nimport { Box, Flex } from \"@chakra-ui/react\";\r\n\r\nconst NetworkCard = (props) => {\r\n  return (\r\n    <Box w={300} borderWidth=\"2px\" borderRadius=\"lg\" bg={\"gray\"} mr={4}>\r\n      <Box p=\"6\">\r\n        <Box display=\"flex\" alignItems=\"center\">\r\n          <Box color=\"white\" fontWeight=\"semibold\" fontSize=\"xl\">\r\n            {props.title}\r\n          </Box>\r\n        </Box>\r\n        <Flex mt={5}>\r\n          <Flex mr={6} alignItems=\"center\">\r\n            <Box>{props.icon}</Box>\r\n            <Flex ml={4} flexDirection={\"column\"} alignItems={\"center\"}>\r\n              <Box>10000</Box>\r\n              <Box>{props.unit}</Box>\r\n            </Flex>\r\n          </Flex>\r\n          <Flex alignItems=\"center\">\r\n            <Box>{props.tokenName}</Box>\r\n            <Flex ml={4} flexDirection={\"column\"} alignItems={\"center\"}>\r\n              <Box>10000</Box>\r\n              <Box>{props.tokenUnit}</Box>\r\n            </Flex>\r\n          </Flex>\r\n        </Flex>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default NetworkCard;\r\n","import React from \"react\";\r\nimport { Box, Flex } from \"@chakra-ui/react\";\r\n\r\nconst InventoryCard = () => {\r\n  return (\r\n    <Box\r\n      w={250}\r\n      h={250}\r\n      borderWidth=\"2px\"\r\n      borderRadius=\"lg\"\r\n      bg={\"gray\"}\r\n      mr={4}\r\n    ></Box>\r\n  );\r\n};\r\n\r\nexport default InventoryCard;\r\n","import React from \"react\";\r\nimport { Box, Flex } from \"@chakra-ui/react\";\r\nimport NetworkCard from \"../components/networkCard/NetworkCard\";\r\nimport InventoryCard from \"../components/inventoryCard/InventoryCard\";\r\n\r\nconst Mypage = () => {\r\n  return (\r\n    <Box>\r\n      <Box>\r\n        <Box fontSize=\"xl\" bg=\"black\" fontWeight=\"bold\">\r\n          내 지갑\r\n        </Box>\r\n        <Flex m={5} bg=\"orange\">\r\n          <NetworkCard\r\n            title={\"Ethereum Network\"}\r\n            icon={\"이더\"}\r\n            unit={\"ETH\"}\r\n            tokenName={\"도레\"}\r\n            tokenUnit={\"미파\"}\r\n          />\r\n          <NetworkCard\r\n            title={\"Local Network\"}\r\n            icon={\"폴리\"}\r\n            unit={\"BNB\"}\r\n            tokenName={\"솔리\"}\r\n            tokenUnit={\"디티\"}\r\n          />\r\n        </Flex>\r\n      </Box>\r\n\r\n      <Box mb={10} />\r\n\r\n      <Box>\r\n        <Box fontSize=\"xl\" bg=\"black\" fontWeight=\"bold\">\r\n          내 인벤토리\r\n        </Box>\r\n        <Flex m={4} bg=\"orange\">\r\n          <Box mr={2} justifyItems=\"center\">\r\n            캐릭터\r\n          </Box>\r\n          <InventoryCard />\r\n        </Flex>\r\n        <Flex m={4} bg=\"orange\">\r\n          <Box mr={2}>아이템</Box>\r\n          <InventoryCard />\r\n        </Flex>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Mypage;\r\n","import React from \"react\";\r\n\r\nimport Main from \"./pages/Main\";\r\nimport BlockGame from \"./pages/BlockGame\";\r\nimport Rank from \"./pages/Rank\";\r\nimport Market from \"./pages/Market\";\r\nimport Nft from \"./pages/Nft\";\r\nimport Mypage from \"./pages/Mypage\";\r\nimport NftDetail from \"./pages/NftDetail.jsx\";\r\n\r\nimport { Route, Routes } from \"react-router-dom\";\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <Routes>\r\n      <Route path=\"/\" element={<Main />} />\r\n      <Route path=\"/game\" element={<BlockGame />} />\r\n      <Route path=\"/rank\" element={<Rank />} />\r\n      <Route path=\"/market\" element={<Market />} />\r\n      <Route path=\"/nft\" element={<Nft />} />\r\n      <Route path=\"/nft/:grade\" element={<NftDetail />} />\r\n      <Route path=\"/mypage\" element={<Mypage />} />\r\n    </Routes>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n","import React, { useEffect } from \"react\";\r\n\r\nimport \"./layout.css\";\r\nimport TopNav from \"./topnav/TopNav\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { connect } from \"../../redux/blockchain/blockchainActions.js\";\r\nimport App from \"../../App\";\r\n\r\nconst Layout = () => {\r\n  const dispatch = useDispatch();\r\n  const blockchain = useSelector((state) => state.blockchain);\r\n  console.log(blockchain);\r\n\r\n  const { account, errorMsg } = blockchain;\r\n\r\n  const walletConnect = (e) => {\r\n    e.preventDefault();\r\n    if (errorMsg != \"\") {\r\n      alert(errorMsg);\r\n      return;\r\n    }\r\n    dispatch(connect());\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(connect());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"layout\">\r\n      {console.log(\"Layout.js 렌더\")}\r\n      <div className=\"layout__content\">\r\n        <TopNav />\r\n        <div>\r\n          {account ? (\r\n            <div className=\"layout__wallet\">{account}</div>\r\n          ) : (\r\n            <>\r\n              <div className=\"layout__wallet\">\r\n                <button onClick={walletConnect}>지갑 연결</button>\r\n              </div>\r\n              {blockchain.errorMsg != \"\" ? (\r\n                <div>{alert(blockchain.errorMsg)}</div>\r\n              ) : null}\r\n            </>\r\n          )}\r\n        </div>\r\n        <App />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"./assets/css/index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport store from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport Layout from \"./components/layout/Layout.jsx\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Provider store={store}>\r\n      <ChakraProvider>\r\n        <Layout />\r\n      </ChakraProvider>\r\n    </Provider>\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}